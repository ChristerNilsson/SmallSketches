// Generated by CoffeeScript 1.11.1
var Flake, Star, draw, dx, dy, flakes, setup, stars;

flakes = [];

stars = [];

dx = 0.86;

dy = 0.5;

Star = (function() {
  function Star(x1, y1, size1, c1, start) {
    this.x = x1;
    this.y = y1;
    this.size = size1;
    this.c = c1;
    this.start = start;
  }

  Star.prototype.draw = function() {
    var c;
    c = 1 + sin(this.start + frameCount * 0.01);
    fc(c, c, 0);
    sc();
    return circle(this.x, this.y, this.size);
  };

  return Star;

})();

Flake = (function() {
  function Flake(x1, y1, size1, gray1, vx1, vy1, va) {
    this.x = x1;
    this.y = y1;
    this.size = size1;
    this.gray = gray1;
    this.vx = vx1;
    this.vy = vy1;
    this.va = va;
    this.a = 0;
  }

  Flake.prototype.draw = function() {
    var x, y;
    fc(this.gray, this.gray, this.gray, 0.9);
    sc();
    sw(this.size * 0.1);
    push();
    translate(this.x, this.y);
    rd(this.a);
    this.a += this.va;
    x = dx * this.size;
    y = dy * this.size;
    triangle(x, y, -x, y, 0, -this.size);
    triangle(x, -y, -x, -y, 0, this.size);
    pop();
    this.y += this.vy;
    if (this.y > height + this.size) {
      this.y = -100;
    }
    return this.x += random(-0.2, 0.2);
  };

  return Flake;

})();

setup = function() {
  var antal, gray, i, j, k, l, len, len1, len2, m, ref, ref1, ref2, results, size, vx, vy;
  createCanvas(1920, 1200);
  ref = range(10);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    size = lerp(1, 2, i);
    gray = lerp(0.1, 0.2, i);
    vx = lerp(-0.2, 0.2, i);
    vy = lerp(1, 2, i);
    antal = lerp(10, 9, i);
    ref1 = range(antal * antal);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      flakes.push(new Flake(random(width), random(height), size * size, gray, vx, vy, random(-0.5, 0.5)));
    }
  }
  ref2 = range(100);
  results = [];
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    i = ref2[m];
    results.push(stars.push(new Star(random(width), random(height), random(1, 2), random(1), random(10))));
  }
  return results;
};

draw = function() {
  var flake, k, l, len, len1, results, star;
  bg(0, 0, 0.05);
  for (k = 0, len = stars.length; k < len; k++) {
    star = stars[k];
    star.draw();
  }
  results = [];
  for (l = 0, len1 = flakes.length; l < len1; l++) {
    flake = flakes[l];
    results.push(flake.draw());
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25vd2ZsYWtlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNub3dmbGFrZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBOztBQUFBLE1BQUEsR0FBUzs7QUFDVCxLQUFBLEdBQVE7O0FBQ1IsRUFBQSxHQUFLOztBQUNMLEVBQUEsR0FBSzs7QUFFQztFQUVTLGNBQUMsRUFBRCxFQUFJLEVBQUosRUFBTyxLQUFQLEVBQWEsRUFBYixFQUFnQixLQUFoQjtJQUFDLElBQUMsQ0FBQSxJQUFEO0lBQUcsSUFBQyxDQUFBLElBQUQ7SUFBRyxJQUFDLENBQUEsT0FBRDtJQUFNLElBQUMsQ0FBQSxJQUFEO0lBQUcsSUFBQyxDQUFBLFFBQUQ7RUFBaEI7O2lCQUVkLElBQUEsR0FBTyxTQUFBO0FBQ04sUUFBQTtJQUFBLENBQUEsR0FBSyxDQUFBLEdBQUUsR0FBQSxDQUFJLElBQUMsQ0FBQSxLQUFELEdBQVMsVUFBQSxHQUFXLElBQXhCO0lBQ1AsRUFBQSxDQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUDtJQUNBLEVBQUEsQ0FBQTtXQUNBLE1BQUEsQ0FBTyxJQUFDLENBQUEsQ0FBUixFQUFVLElBQUMsQ0FBQSxDQUFYLEVBQWEsSUFBQyxDQUFBLElBQWQ7RUFKTTs7Ozs7O0FBTUY7RUFFUyxlQUFDLEVBQUQsRUFBSSxFQUFKLEVBQU8sS0FBUCxFQUFhLEtBQWIsRUFBbUIsR0FBbkIsRUFBdUIsR0FBdkIsRUFBMkIsRUFBM0I7SUFBQyxJQUFDLENBQUEsSUFBRDtJQUFHLElBQUMsQ0FBQSxJQUFEO0lBQUcsSUFBQyxDQUFBLE9BQUQ7SUFBTSxJQUFDLENBQUEsT0FBRDtJQUFNLElBQUMsQ0FBQSxLQUFEO0lBQUksSUFBQyxDQUFBLEtBQUQ7SUFBSSxJQUFDLENBQUEsS0FBRDtJQUN4QyxJQUFDLENBQUEsQ0FBRCxHQUFLO0VBRFE7O2tCQUdkLElBQUEsR0FBTyxTQUFBO0FBQ04sUUFBQTtJQUFBLEVBQUEsQ0FBRyxJQUFDLENBQUEsSUFBSixFQUFTLElBQUMsQ0FBQSxJQUFWLEVBQWUsSUFBQyxDQUFBLElBQWhCLEVBQXFCLEdBQXJCO0lBQ0EsRUFBQSxDQUFBO0lBQ0EsRUFBQSxDQUFHLElBQUMsQ0FBQSxJQUFELEdBQU0sR0FBVDtJQUNBLElBQUEsQ0FBQTtJQUNBLFNBQUEsQ0FBVSxJQUFDLENBQUEsQ0FBWCxFQUFhLElBQUMsQ0FBQSxDQUFkO0lBQ0EsRUFBQSxDQUFHLElBQUMsQ0FBQSxDQUFKO0lBQ0EsSUFBQyxDQUFBLENBQUQsSUFBTSxJQUFDLENBQUE7SUFDUCxDQUFBLEdBQUksRUFBQSxHQUFHLElBQUMsQ0FBQTtJQUNSLENBQUEsR0FBSSxFQUFBLEdBQUcsSUFBQyxDQUFBO0lBQ1IsUUFBQSxDQUFTLENBQVQsRUFBVyxDQUFYLEVBQWMsQ0FBQyxDQUFmLEVBQWlCLENBQWpCLEVBQW9CLENBQXBCLEVBQXNCLENBQUMsSUFBQyxDQUFBLElBQXhCO0lBQ0EsUUFBQSxDQUFTLENBQVQsRUFBVyxDQUFDLENBQVosRUFBZSxDQUFDLENBQWhCLEVBQWtCLENBQUMsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBd0IsSUFBQyxDQUFBLElBQXpCO0lBQ0EsR0FBQSxDQUFBO0lBQ0EsSUFBQyxDQUFBLENBQUQsSUFBTSxJQUFDLENBQUE7SUFDUCxJQUFhLElBQUMsQ0FBQSxDQUFELEdBQUcsTUFBQSxHQUFPLElBQUMsQ0FBQSxJQUF4QjtNQUFBLElBQUMsQ0FBQSxDQUFELEdBQUssQ0FBQyxJQUFOOztXQUNBLElBQUMsQ0FBQSxDQUFELElBQU0sTUFBQSxDQUFPLENBQUMsR0FBUixFQUFZLEdBQVo7RUFmQTs7Ozs7O0FBaUJSLEtBQUEsR0FBUSxTQUFBO0FBQ1AsTUFBQTtFQUFBLFlBQUEsQ0FBYSxJQUFiLEVBQWtCLElBQWxCO0FBQ0E7QUFBQSxPQUFBLHFDQUFBOztJQUNDLElBQUEsR0FBTyxJQUFBLENBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFUO0lBQ1AsSUFBQSxHQUFPLElBQUEsQ0FBSyxHQUFMLEVBQVMsR0FBVCxFQUFhLENBQWI7SUFDUCxFQUFBLEdBQUssSUFBQSxDQUFLLENBQUMsR0FBTixFQUFVLEdBQVYsRUFBYyxDQUFkO0lBQ0wsRUFBQSxHQUFLLElBQUEsQ0FBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQ7SUFDTCxLQUFBLEdBQVEsSUFBQSxDQUFLLEVBQUwsRUFBUSxDQUFSLEVBQVUsQ0FBVjtBQUNSO0FBQUEsU0FBQSx3Q0FBQTs7TUFDQyxNQUFNLENBQUMsSUFBUCxDQUFnQixJQUFBLEtBQUEsQ0FBTSxNQUFBLENBQU8sS0FBUCxDQUFOLEVBQW9CLE1BQUEsQ0FBTyxNQUFQLENBQXBCLEVBQW1DLElBQUEsR0FBSyxJQUF4QyxFQUE2QyxJQUE3QyxFQUFrRCxFQUFsRCxFQUFxRCxFQUFyRCxFQUF3RCxNQUFBLENBQU8sQ0FBQyxHQUFSLEVBQVksR0FBWixDQUF4RCxDQUFoQjtBQUREO0FBTkQ7QUFRQTtBQUFBO09BQUEsd0NBQUE7O2lCQUNDLEtBQUssQ0FBQyxJQUFOLENBQWUsSUFBQSxJQUFBLENBQUssTUFBQSxDQUFPLEtBQVAsQ0FBTCxFQUFtQixNQUFBLENBQU8sTUFBUCxDQUFuQixFQUFrQyxNQUFBLENBQU8sQ0FBUCxFQUFTLENBQVQsQ0FBbEMsRUFBOEMsTUFBQSxDQUFPLENBQVAsQ0FBOUMsRUFBd0QsTUFBQSxDQUFPLEVBQVAsQ0FBeEQsQ0FBZjtBQUREOztBQVZPOztBQWFSLElBQUEsR0FBTyxTQUFBO0FBQ04sTUFBQTtFQUFBLEVBQUEsQ0FBRyxDQUFILEVBQUssQ0FBTCxFQUFPLElBQVA7QUFDQSxPQUFBLHVDQUFBOztJQUNDLElBQUksQ0FBQyxJQUFMLENBQUE7QUFERDtBQUVBO09BQUEsMENBQUE7O2lCQUNDLEtBQUssQ0FBQyxJQUFOLENBQUE7QUFERDs7QUFKTSIsInNvdXJjZXNDb250ZW50IjpbImZsYWtlcyA9IFtdXG5zdGFycyA9IFtdXG5keCA9IDAuODYgIyBjb3MoMzApXG5keSA9IDAuNSAjIHNpbigzMClcblxuY2xhc3MgU3RhclxuXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5LEBzaXplLEBjLEBzdGFydCkgLT5cblxuXHRkcmF3IDogLT5cblx0XHRjID0gKDErc2luKEBzdGFydCArIGZyYW1lQ291bnQqMC4wMSkpIFxuXHRcdGZjIGMsYywwXG5cdFx0c2MoKVxuXHRcdGNpcmNsZSBAeCxAeSxAc2l6ZVxuXG5jbGFzcyBGbGFrZSBcblxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSxAc2l6ZSxAZ3JheSxAdngsQHZ5LEB2YSkgLT5cblx0XHRAYSA9IDBcblxuXHRkcmF3IDogLT5cblx0XHRmYyBAZ3JheSxAZ3JheSxAZ3JheSwwLjlcblx0XHRzYygpXG5cdFx0c3cgQHNpemUqMC4xXG5cdFx0cHVzaCgpXG5cdFx0dHJhbnNsYXRlIEB4LEB5XHRcblx0XHRyZCBAYVxuXHRcdEBhICs9IEB2YVxuXHRcdHggPSBkeCpAc2l6ZVxuXHRcdHkgPSBkeSpAc2l6ZVxuXHRcdHRyaWFuZ2xlIHgseSwgLXgseSwgMCwtQHNpemVcblx0XHR0cmlhbmdsZSB4LC15LCAteCwteSwgMCxAc2l6ZVxuXHRcdHBvcCgpXG5cdFx0QHkgKz0gQHZ5XG5cdFx0QHkgPSAtMTAwIGlmIEB5PmhlaWdodCtAc2l6ZVxuXHRcdEB4ICs9IHJhbmRvbSgtMC4yLDAuMilcblxuc2V0dXAgPSAtPlxuXHRjcmVhdGVDYW52YXMgMTkyMCwxMjAwXG5cdGZvciBpIGluIHJhbmdlIDEwXG5cdFx0c2l6ZSA9IGxlcnAgMSwyLGlcblx0XHRncmF5ID0gbGVycCAwLjEsMC4yLGlcblx0XHR2eCA9IGxlcnAgLTAuMiwwLjIsaVxuXHRcdHZ5ID0gbGVycCAxLDIsaVxuXHRcdGFudGFsID0gbGVycCAxMCw5LGlcblx0XHRmb3IgaiBpbiByYW5nZSBhbnRhbCphbnRhbFxuXHRcdFx0Zmxha2VzLnB1c2ggbmV3IEZsYWtlIHJhbmRvbSh3aWR0aCkscmFuZG9tKGhlaWdodCksc2l6ZSpzaXplLGdyYXksdngsdnkscmFuZG9tKC0wLjUsMC41KVxuXHRmb3IgaSBpbiByYW5nZSAxMDBcblx0XHRzdGFycy5wdXNoIG5ldyBTdGFyIHJhbmRvbSh3aWR0aCkscmFuZG9tKGhlaWdodCkscmFuZG9tKDEsMikscmFuZG9tKDEpLHJhbmRvbSgxMClcblxuZHJhdyA9IC0+XHRcblx0YmcgMCwwLDAuMDVcblx0Zm9yIHN0YXIgaW4gc3RhcnNcblx0XHRzdGFyLmRyYXcoKVxuXHRmb3IgZmxha2UgaW4gZmxha2VzXG5cdFx0Zmxha2UuZHJhdygpXG4iXX0=
//# sourceURL=C:\github\SmallSketches\snowflakes.coffee